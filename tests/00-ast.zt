=== TEST 1.0: number assign
--- ast
n = 1
--- out
[["assign","n",["number",1]]]

=== TEST 1.1: single quote assign
--- ast
s = 'hello'
--- out
[["assign","s",["string","hello"]]]

=== TEST 1.2: double quote assign
--- ast
s = "hello"
--- out
[["assign","s",["string","hello"]]]

=== TEST 1.3: expr assign
--- ast
n = 1+2+3
--- out
[["assign","n",["+",["+",["number",1],["number",2]],["number",3]]]]

=== TEST 1.4: operator precendence
--- ast
n = 1+2*3
--- out
[["assign","n",["+",["number",1],["*",["number",2],["number",3]]]]]

=== TEST 1.5: assign with comment
--- ast
n = 1/2*3 # comment
--- out
[["assign","n",["*",["\/",["number",1],["number",2]],["number",3]]]]

=== TEST 1.6: assign contains ref
--- ast
m = 1
n = 1+m*2
--- out
[["assign","m",["number",1]],["assign","n",["+",["number",1],["*",["ref","m"],["number",2]]]]]

=== TEST 1.7: local assign
--- ast
local n = 1
--- out
[["local","n",["number",1]]]

=== TEST 1.8: floating-point number
--- ast
m = 1.1
n = -1.1
--- out
[["assign","m",["number",1.1]],["assign","n",["number",-1.1]]]


=== TEST 2.0: if
--- ast
if n < 0
end
--- out
[["if",["<",["ref","n"],["number",0]],{}]]

--- ast
if n < 0
    n = -1 * n
end
--- out
[["if",["<",["ref","n"],["number",0]],[["assign","n",["*",["number",-1],["ref","n"]]]]]]

--- ast
if n < m * 2
    n = -1 * n
end
--- out
[["if",["<",["ref","n"],["*",["ref","m"],["number",2]]],[["assign","n",["*",["number",-1],["ref","n"]]]]]]


=== TEST 2.1: if else
--- ast
if n > 0
else
end
--- out
[["if",[">",["ref","n"],["number",0]],{},["else",{}]]]

--- ast
if n > 0
    n = n * 2
else
    n = n * -1
end
--- out
[["if",[">",["ref","n"],["number",0]],[["assign","n",["*",["ref","n"],["number",2]]]],["else",[["assign","n",["*",["ref","n"],["number",-1]]]]]]]


=== TEST 3.0: while
--- ast
while n > 0
    n = n - 1
end
--- out
[["while",[">",["ref","n"],["number",0]],[["assign","n",["-",["ref","n"],["number",1]]]]]]


=== TEST 4.0: call
--- ast
n = add(1, 2)
--- out
[["assign","n",["call","add",[["number",1],["number",2]]]]]

--- ast
n = add(1, 2) * 2
--- out
[["assign","n",["*",["call","add",[["number",1],["number",2]]],["number",2]]]]


=== TEST 5.0: def
--- ast
def factorial(n)
    if n < 2 return 1 end
    return n * factorial(n - 1)
end
--- out
[["def","factorial",["n"],[["if",["<",["ref","n"],["number",2]],[["return",["number",1]]]],["return",["*",["ref","n"],["call","factorial",[["-",["ref","n"],["number",1]]]]]]]]]

--- ast
def add(a, b)
    return a + b
end
--- out
[["def","add",["a","b"],[["return",["+",["ref","a"],["ref","b"]]]]]]

=== TEST 5.1: nested def
--- ast
def incr()
    local n = 0
    def wrapper()
        n = n + 1
        return n
    end
end
--- out
[["def","incr",{},[["local","n",["number",0]],["def","wrapper",{},[["assign","n",["+",["ref","n"],["number",1]]],["return",["ref","n"]]]]]]]
